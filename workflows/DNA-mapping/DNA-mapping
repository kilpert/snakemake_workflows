#!/usr/bin/env python3

__version__ = "0.5"

__description__ = """
DNA-mapping workflow v{version} - MPI-IE workflow for DNA mapping
Fabian Kilpert, Andreas Richter, Steffen Heyne
March 15, 2017

usage example:
    DNA-mapping -i input-dir -o output-dir mm10
""".format(version=__version__)


import argparse
import os
import signal
import subprocess
import sys
import textwrap
import time
import shutil
import yaml


sys.path.append(os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(__file__)))))+"/shared/")
import common_functions as cf


def parse_args(defaults):
    """
    Parse arguments from the command line.
    """

    parser = argparse.ArgumentParser(
        prog=sys.argv[0],
        formatter_class=argparse.RawDescriptionHelpFormatter, 
        description=textwrap.dedent(__description__),
        add_help=False
    )

    optional = parser._action_groups.pop() # Edited this line

    ## positional/required
    parser.add_argument("genome", metavar="GENOME", help="genome acronym of target organism (supported: 'dm3', 'dm6', 'hs37d5', 'mm9', 'mm10', 'SchizoSPombe_ASM294v2')")
    
    required = parser.add_argument_group('required arguments')
    required.add_argument("-i", "--input-dir", dest="indir", help="input directory containing the FASTQ files, either paired-end OR single-end data",required=True)
    required.add_argument("-o", "--output-dir", dest="outdir", help="output directory",required=True)
 
    general = parser.add_argument_group('general arguments')
    general.add_argument("-h", "--help", action="help", help="show this help message and exit")
    general.add_argument("-v", "--verbose", dest="verbose", action="store_true", help="verbose output (default: '%(default)s')", default=defaults["verbose"])
    general.add_argument("-c", "--configfile", dest="configfile", help="configuration file: config.yaml (default: '%(default)s')", default=defaults["configfile"])
    general.add_argument("-j", "--jobs", dest="max_jobs", metavar="INT", help="maximum number of concurrently submitted Slurm jobs / cores if workflow is run locally (default: '%(default)s')", type=int, default=defaults["max_jobs"])
    general.add_argument("--local", dest="local", action="store_true", default=False, help="run workflow locally; default: jobs are submitted to Slurm queue (default: '%(default)s')")
    general.add_argument("--snakemake_options", dest="snakemake_options", metavar="STR", type=str, help="Snakemake options to be passed directly to snakemake, e.g. use --snakemake_options='--dryrun --rerun-incomplete --unlock --forceall'. (default: '%(default)s')", default=defaults["snakemake_options"])
    general.add_argument("--tempdir", dest="tempdir", type=str, help="used prefix path for temporary directory created via mktemp. Created temp dir gets exported as $TMPDIR and is removed at the end of this wrapper! (default: '%(default)s')", default=defaults["tempdir"])
 
    ## optional
    parser._action_groups.append(optional)       
    parser.add_argument("--downsample", dest="downsample", metavar="INT", help="downsample the given number of reads randomly from of each FASTQ file (default: '%(default)s')", type=int, default=defaults["downsample"])
    parser.add_argument("--trim_prg", dest="trim_prg", choices=['cutadapt', 'trimgalore'], help="trimming program: Cutadapt or TrimGalore (default: '%(default)s')", default=defaults["trim_prg"])
    parser.add_argument("--trim", dest="trim", action="store_true", help="activate trimming (default: '%(default)s')", default=defaults["trim"])
    parser.add_argument("--qualimap", dest="qualimap", action="store_true", help="activate Qualimap (default: '%(default)s')", default=defaults["qualimap"])
    parser.add_argument("--fastqc", dest="fastqc", action="store_true", help="run FastQC read quality control (default: '%(default)s')", default=defaults["fastqc"])
    parser.add_argument("--dedup", dest="dedup", action="store_true", help="retain only de-duplicated reads/read pairs (given single-/paired-end data), recommended for ChIP-seq data (default: '%(default)s')", default=defaults["dedup"])
    parser.add_argument("--properpairs", dest="properpairs", action="store_true", help="retain only reads mapping in proper pairs (default: '%(default)s')", default=defaults["properpairs"])
    parser.add_argument("--mapq", dest="mapq", metavar="INT", help="retain only reads with at least the given mapping quality (default: '%(default)s')", type=int, default=defaults["mapq"])
    parser.add_argument("--bw-binsize", dest="bw_binsize", metavar="INT", help="bin size of output files in bigWig format (default: '%(default)s')", type=int, default=defaults["bw_binsize"])
    parser.add_argument("--gcbias", dest="gcbias", action="store_true", help="run computeGCBias quality control (long runtime!) (default: '%(default)s')", default=defaults["gcbias"])

    args = parser.parse_args()

    args.outdir = os.path.abspath(args.outdir)      
    args.cluster_logs_dir = os.path.join(args.outdir, "cluster_logs")

    ## checks for parameters necessary in wrapper
    if os.path.exists(args.indir):
        args.indir = os.path.abspath(args.indir)
    else:
        print("\nError! Input dir not found! ({})\n".format(args.indir))
        exit(1)

    if args.configfile and not os.path.exists(args.configfile):
        print("\nError! Provided configfile (-c) not found! ({})\n".format(args.configfile))
        exit(1)

    return args


def main():

    ## basic paths only used in wrapper
    this_script_dir = os.path.dirname(os.path.realpath(__file__))
    main_dir_path = os.path.join(os.path.dirname(os.path.dirname(this_script_dir)))

    ## defaults
    defaults = cf.load_configfile(os.path.join(this_script_dir, "defaults.yaml"),False)
    
    ## get command line arguments
    args = parse_args(defaults)

    ## we also add these paths to config, although we dont use them in the Snakefile
    args.this_script_dir = this_script_dir
    args.main_dir_path = main_dir_path
    
    ## merge configuration dicts
    config = defaults   # 1) form defaults.yaml
    if args.configfile:
        user_config = cf.load_configfile(args.configfile,False)
        config = cf.merge_dicts(config, user_config) # 2) form user_config.yaml
    config_wrap = cf.config_diff(vars(args),defaults) # 3) from wrapper parameters
    config = cf.merge_dicts(config, config_wrap) 

    ## Output directory + log directory
    subprocess.call("[ -d {cluster_logs_dir} ] || mkdir -p {cluster_logs_dir}".format(cluster_logs_dir=args.cluster_logs_dir), shell=True)
    
    ## save to configs.yaml in outdir
    cf.write_configfile(os.path.join(args.outdir,'config.yaml'),config)
    
    snakemake_module_load = "module load snakemake slurm &&".split()
    snakemake_cmd = """
                    snakemake {snakemake_options} --latency-wait 300 --snakefile {snakefile} --jobs {max_jobs} --directory {outdir} --configfile {configfile}
                    """.format( snakefile = os.path.join(args.this_script_dir, "Snakefile"),
                                max_jobs = args.max_jobs,
                                outdir = args.outdir,
                                snakemake_options = str(args.snakemake_options or ''),
                                configfile = os.path.join(args.outdir,'config.yaml'),
                              ).split()

    if args.verbose:
        snakemake_cmd.append("--printshellcmds")

    if not args.local:
        snakemake_cmd += ["--cluster 'SlurmEasy --threads {threads} --log", args.cluster_logs_dir, "--name {rule}.snakemake'"]

    snakemake_log = "2>&1 | tee -a {}/DNA-mapping.log".format(args.outdir).split()

    ## create local temp dir and add this path to environment as $TMPDIR variable
    ## on SLURM: $TMPDIR is set, created and removed by SlurmEasy on cluster node
    temp_path = cf.make_temp_dir(args.tempdir, args.outdir, args.verbose)
    snakemake_exports = ("export TMPDIR="+temp_path+" && ").split()

    cmd = " ".join(snakemake_exports + snakemake_module_load + snakemake_cmd + snakemake_log)

    if args.verbose:
        print("\n", cmd, "\n")

    ## Write snakemake_cmd to log file
    with open(os.path.join(args.outdir,"DNA-mapping.log"),"w") as f:
        f.write(" ".join(sys.argv)+"\n\n")
        f.write(cmd+"\n\n")

    ## Run snakemake
    p = subprocess.Popen(cmd, shell=True)
    if args.verbose:
        print("PID:", p.pid, "\n")
    try:
        p.wait()
    except:
        print("\nWARNING: Snakemake terminated!!!")
        if p.returncode != 0:
            if p.returncode:
                print("Returncode:", p.returncode)

            # kill snakemake and child processes
            subprocess.call(["pkill", "-SIGTERM", "-P", str(p.pid)])
            print("SIGTERM sent to PID:", p.pid)

            # # kill grid engine jobs
            # time.sleep(10)
            # job_ids = subprocess.check_output("""ls {cluster_logs_dir} | awk -F "." '{{print $NF}}' | sed 's/e\|o//' | sort -u""".format(cluster_logs_dir=cluster_logs_dir), shell=True).split()
            # for job_id in job_ids:
            #     subprocess.call( "qdel {} 2>&1 >/dev/null".format(str(job_id)), shell="bash" )

    ## remove temp dir
    if (temp_path != "" and os.path.exists(temp_path)):
        shutil.rmtree(temp_path, ignore_errors=True)
        if args.verbose:
            print("temp dir removed: "+temp_path+"\n")


if __name__ == "__main__":
    main()
