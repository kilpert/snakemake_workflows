#!/usr/bin/env python3

__version__ = "0.4"

__description__ = """
ChIP-seq workflow v{version} - MPI-IE workflow for ChIP-seq analysis
Fabian Kilpert, Andreas Richter
July 25, 2016

Usage example:
    ChIP-seq -d working-dir mm10 config.yaml
""".format(version=__version__)

## Dependencies from DNA-mapping workflow
## OUTDIR/filtered_bam
##       /Picard_qc/AlignmentSummaryMetrics
##                 /MarkDuplicates
##                 /InsertSizeMetrics

import argparse
import os
import signal
import subprocess
import sys
import textwrap
import time
import shutil

sys.path.append(os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(__file__)))))+"/shared/")
import common_functions

def parse_args():
    """
    Parse arguments from the command line.
    """

    parser = argparse.ArgumentParser(
        prog=sys.argv[0],
        formatter_class=argparse.RawDescriptionHelpFormatter, description=textwrap.dedent(__description__)
    )

    ## positional/required
    parser.add_argument("genome", metavar="GENOME", help="genome acronym of target organism (supported: 'dm6', 'hs37d5', 'mm9', 'mm10')")
    parser.add_argument("configfile", metavar="CONFIGFILE", help="configuration file (config.yaml) with sample annotation")
    ## optional
    parser.add_argument("-d", "--working-dir", dest="workingdir", help="working directory is output directory and must contain DNA-mapping pipeline output files (default: '.')", default=None)
    parser.add_argument("-j", "--jobs", dest="max_jobs", metavar="INT", help="maximum number of concurrently submitted Slurm jobs / cores if workflow is run locally (default: '%(default)s')", type=int, default=8)
    parser.add_argument("--local", dest="local", action="store_true", default=False, help="run workflow locally (default: jobs are submitted to Slurm queue)")
    parser.add_argument("--snakemake_options", dest="snakemake_options", metavar="STR", type=str, help="Snakemake options to be passed directly to snakemake, e.g. use --snakemake_options='--dryrun --rerun-incomplete --unlock --forceall'. (default: '%(default)s')", default="")
    parser.add_argument("--single-end", dest="singleend", action="store_true", default=False, help="input data is single-end, not paired-end (the default)")
    parser.add_argument("--bw-binsize", dest="bw_binsize", metavar="INT", help="bin size of output files in bigWig format (default: '%(default)s')", type=int, default=10)
    parser.add_argument("--tempdir", dest="tempdir", type=str, help="used prefix path for temporary directory created via mktemp. Created temp dir gets exported as $TMPDIR and is removed at the end of this wrapper! (default: '/data/extended/')", default="/data/extended/")
    parser.add_argument("-v", "--verbose", dest="verbose", action="store_true", default=False, help="verbose output")

    args = parser.parse_args()

    ## Variable sanity checking
    ## None

    ## correction to variables
    try:
        args.workingdir = os.path.abspath(args.workingdir)
    except:
        args.workingdir = os.path.abspath(os.getcwd())

    try:
        args.configfile = os.path.abspath(args.configfile)
    except:
        args.configfile = None

    return args


def main():
    args = parse_args()

    ## Require shared snakemake workflow directory
    this_script_dir = os.path.dirname(os.path.realpath(__file__))

    main_dir_path = os.path.join(os.path.dirname(os.path.dirname(this_script_dir)))
    if not os.path.isdir(main_dir_path):
        print("ERROR: Shared snakemake workflow directory is NOT available at:", main_dir_path)
        exit(1)

    ## Require configuration file (config.yaml)
    if not os.path.isfile(args.configfile):
        print("ERROR: Configuration file is NOT available at:", args.configfile)
        exit(1)


    ## Output directory + log directory
    cluster_logs_dir = os.path.join(args.workingdir, "cluster_logs")
    subprocess.call("[ -d {cluster_logs_dir} ] || mkdir -p {cluster_logs_dir}".format(cluster_logs_dir=cluster_logs_dir), shell=True)

    ## required config variables
    user_configs = "--config maindir={main_dir_path} workingdir={workingdir} genome={genome} paired={paired}".format(
                                main_dir_path = main_dir_path,
                                workingdir = args.workingdir,
                                genome = args.genome,
                                paired = not args.singleend).split()

    ## optional config variables
    if args.bw_binsize:
        user_configs += ["bw_binsize={}".format(args.bw_binsize)]
    if args.verbose:
        user_configs += ["verbose=True"]

    snakemake_module_load = "module load snakemake slurm &&".split()
    snakemake_cmd = """
                    snakemake {snakemake_options} --latency-wait 30 --snakefile {snakefile} --jobs {max_jobs} {user_configs} --configfile {configfile} --directory {workingdir}
                    """.format( snakefile = os.path.join(this_script_dir, "Snakefile"),
                                max_jobs = args.max_jobs,
                                user_configs = " ".join(user_configs),
                                configfile = args.configfile,
                                workingdir = args.workingdir,
                                cluster_logs_dir = os.path.abspath(cluster_logs_dir),
                                snakemake_options=args.snakemake_options,
                              ).split()

    if args.verbose:
        snakemake_cmd.append("--printshellcmds")

    if not args.local:
        snakemake_cmd += ["--cluster 'SlurmEasy --threads {threads} --log", cluster_logs_dir, "--name {rule}.snakemake'"]

    snakemake_log = "2>&1 | tee -a {}/ChIP-seq.log".format(args.workingdir).split()

    ## create local temp dir and add this path to environment as $TMPDIR variable 
    ## on SLURM: $TMPDIR is set, created and removed by SlurmEasy on cluster node 
    temp_path = common_functions.make_temp_dir(args.tempdir, args.workingdir)
    snakemake_exports = ("export TMPDIR="+temp_path+" && ").split()

    cmd = " ".join(snakemake_exports + snakemake_module_load + snakemake_cmd + snakemake_log)

    if args.verbose:
        print("\n", cmd, "\n")

    ## Write snakemake_cmd to log file
    with open(os.path.join(args.workingdir,"ChIP-seq.log"),"w") as f:
        f.write(" ".join(sys.argv)+"\n\n")
        f.write(cmd+"\n\n")

    ## Run snakemake
    p = subprocess.Popen(cmd, shell=True)
    if args.verbose:
        print("PID:", p.pid, "\n")
    try:
        p.wait()
    except:
        print("\nWARNING: Snakemake terminated!!!")
        if p.returncode != 0:
            if p.returncode:
                print("Returncode:", p.returncode)

            # kill snakemake and child processes
            subprocess.call(["pkill", "-SIGTERM", "-P", str(p.pid)])
            print("SIGTERM sent to PID:", p.pid)

            # # kill grid engine jobs
            # time.sleep(10)
            # job_ids = subprocess.check_output("""ls {cluster_logs_dir} | awk -F "." '{{print $NF}}' | sed 's/e\|o//' | sort -u""".format(cluster_logs_dir=cluster_logs_dir), shell=True).split()
            # for job_id in job_ids:
            #     subprocess.call( "qdel {} 2>&1 >/dev/null".format(str(job_id)), shell="bash" )
    
    ## remove temp dir
    if (temp_path != "" and os.path.exists(temp_path)):
        shutil.rmtree(temp_path, ignore_errors=True)
        if args.verbose: 
            print("Temp directory removed ("+temp_path+")!\n")
            

if __name__ == "__main__":
    #print "Args:", sys.argv
    main()
