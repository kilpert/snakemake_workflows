import os

### snakemake_workflows initialization ########################################
maindir = os.path.dirname(os.path.dirname(workflow.basedir))
sys.path.append(os.path.join(maindir, "shared"))

import common_functions as cf

# load tool paths
globals().update(cf.load_paths(os.path.join(maindir, "shared", "paths.yaml"),maindir,config["verbose"]))
# load config file
globals().update(cf.load_configfile(workflow.overwrite_configfile,config["verbose"]))
# load organism-specific data, i.e. genome indices, annotation, etc.
globals().update(cf.load_organism_data(genome,maindir,config["verbose"]))

# do workflow specific stuff now 
include: os.path.join(workflow.basedir, "internals.snakefile")


### include modules of other snakefiles ########################################
################################################################################
include: os.path.join(maindir, "shared", "rules", "FASTQ.snakefile")
include: os.path.join(maindir, "shared", "rules", "scRNAseq.snakefile")
include: os.path.join(maindir, "shared", "rules", "FastQC.snakefile")
include: os.path.join(maindir, "shared", "rules", "filter_annotation.snakefile")

# TrimGalore
if trim:
    include: os.path.join(maindir, "shared", "rules", "TrimGalore.snakefile")

### conditional/optional rules #################################################
################################################################################

def run_Trimming(trim):
    if trim:
        return( expand(fastq_dir+"/{sample}.fastq.gz", sample = samples) )
    else:
        return([])

def run_bamCoverage():
    return( expand("bamCoverage/{sample}.coverage.bw", sample = samples) )
    

### execute before workflow starts #############################################
################################################################################
onstart:    
    if "verbose" in config and config["verbose"]:
        print("--- Workflow parameter ---------------------------------------------------------")
        print("Input directory:", indir)
        print("Input files:", infiles)
        print("Samples:", samples)
        print("Paired-end reads:", paired)
        print("Read extension:", reads)
        print("Genome:", genome)
        print("Downsample:", downsample)
        print("Trimming:", trim)
        print("Input directory for mapping:", fastq_dir)
        print("Input directory for trimming:", fastq_indir_trim)
        print("BigWig bin size:", bw_binsize)
        print("Barcode pattern:", barcode_pattern)
        print("Barcode file:", barcode_file)
        print("UMI_LEN:",UMI_length)
        print("UMI_offset:",UMI_offset)
        print("CELLI_LEN:",CELLI_length)
        print("CELLI_offset:",CELLI_offset)

        print("-" * 80, "\n")
        
        print("--- Environment ----------------------------------------------------------------")
        print("$TMPDIR: ",os.getenv('TMPDIR', ""))
        print("$HOSTNAME: ",os.getenv('HOSTNAME', ""))
        print("-" * 80, "\n")

### main rule ##################################################################
################################################################################
localrules: annot
rule all:
    input:
        expand("FASTQ/{sample}{read}.fastq.gz", sample = samples, read = reads),
        expand("FASTQ_barcoded/{sample}.fastq.gz", sample = samples),
        run_Trimming(trim),
        expand("FastQC/{sample}{read}_fastqc.html", sample = samples, read=reads),
        expand("FastQC_trimmed/{sample}_fastqc.html", sample = samples),
        expand("STAR_genomic/{sample}.bam", sample = samples),
        expand("Counts/{sample}.cout.csv",sample = samples),
        expand("Counts/{sample}.coutt.csv",sample = samples),
        expand("Counts/{sample}.featureCounts_summary.txt",sample = samples),
        "Results/all_samples.gencode_genomic.coutt_merged.csv",
        "QC_report/QC_report.all_samples.libstats_reads.tsv",
        expand("Tracks/{sample}.Coverage.bw", sample = samples),
        "deepTools_qc/plotEnrichment/plotEnrichment.png",
        "deepTools_qc/plotEnrichment/plotEnrichment.tsv",
rule annot:
    input:
        "Annotation/genes.filtered.bed",
        "Annotation/genes.filtered.gtf",


### execute after workflow finished ############################################
################################################################################
onsuccess:
    if "verbose" in config and config["verbose"]:
        print("\n--- scRNAseq-mapcount workflow finished successfully! --------------------------------\n")   