#!/usr/bin/env python3

__version__ = "0.6"

__description__ = """
single cell RNA-seq mapping and counting workflow v{version} - MPI-IE workflow for scRNA-seq

usage example:
    scRNAseq-mapcount -i input-dir -o output-dir mm10
""".format(version=__version__)


import argparse
import os
import subprocess
import sys
import textwrap
import time
import shutil
import yaml
import inspect

sys.path.append(os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(inspect.getfile(inspect.currentframe()) )))))+"/shared/")

import common_functions as cf

def parse_args(defaults={"verbose":None,"configfile":None,"cluster_configfile":None,"max_jobs":None,"snakemake_options":None,"tempdir":None,
                         "downsample":None, "trim":None, "trim_options":None, "cell_names":None,
                         "filter_annotation":None, "barcode_file":None, "barcode_pattern":None, "split_lib": None,
                         "bw_binsize":None, "mapq":None}):
    """
    Parse arguments from the command line.
    """

    parser = argparse.ArgumentParser(
        prog=sys.argv[0],
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent(__description__),
        add_help=False
    )

    ## positional/required
    parser.add_argument("genome",
                        metavar="GENOME",
                        help="genome acronym of target organism (supported: 'dm3', 'dm6', 'hs37d5', 'mm9', 'mm10', 'SchizoSPombe_ASM294v2') "
                        "or file path to your own genome config!")


    required = parser.add_argument_group('required arguments')

    required.add_argument("-i", "--input-dir",
                         dest="indir",
                         help="input directory containing the FASTQ files, either paired-end OR single-end data",required=True)
    
    required.add_argument("-o", "--output-dir",
                         dest="outdir",
                         help="output directory",required=True)
    ## general args
    general = parser.add_argument_group('general arguments')

    general.add_argument("-h", "--help",
                        action="help",
                        help="show this help message and exit")
    
    general.add_argument("-v", "--verbose",
                        dest="verbose",
                        action="store_true",
                        help="verbose output (default: '%(default)s')",
                        default=defaults["verbose"])
    
    general.add_argument("-c", "--configfile",
                        dest="configfile",
                        help="configuration file: config.yaml (default: '%(default)s')",
                        default=defaults["configfile"])
     
    general.add_argument("--cluster_configfile",
                        dest="cluster_configfile",
                        help="configuration file for cluster usage. In absence, the default options "
                        "from shared/cluster.yaml and workflows/[workflow]/cluster.yaml would be selected (default: '%(default)s')",
                        default=defaults["cluster_configfile"])
    
    general.add_argument("-j", "--jobs",
                        dest="max_jobs",
                        metavar="INT",
                        help="maximum number of concurrently submitted Slurm jobs / cores if workflow is run locally "
                        "(default: '%(default)s')", type=int, default=defaults["max_jobs"])
    
    general.add_argument("--local",
                        dest="local",
                        action="store_true",
                        default=False,
                        help="run workflow locally; default: jobs are submitted to Slurm queue (default: '%(default)s')")
    
    general.add_argument("--snakemake_options",
                        dest="snakemake_options",
                        metavar="STR",
                        type=str,
                        help="Snakemake options to be passed directly to snakemake, e.g. use "
                        "--snakemake_options='--dryrun --rerun-incomplete --unlock --forceall'. (default: '%(default)s')",
                        default=defaults["snakemake_options"])
    
    general.add_argument("--tempdir",
                        dest="tempdir",
                        type=str,
                        help="used prefix path for temporary directory created via mktemp. "
                        "Created temp dir gets exported as $TMPDIR and is removed at the end of this wrapper! (default: '%(default)s')",
                        default=defaults["tempdir"])

     ## optional
    optional = parser.add_argument_group('Optional arguments')
    
    optional.add_argument("--downsample",
                       dest="downsample",
                       metavar="INT",
                       help="downsample the given number of reads randomly from of each FASTQ file",
                       type=int,
                       default=defaults["downsample"])
    optional.add_argument("--trim",
                       dest="trim",
                       action="store_true",
                       default=defaults["trim"],
                       help="Activate trimming with Cutadapt. Default: no Trimming!")
    optional.add_argument("--trim_options",
                       dest="trim_options",
                       metavar="STR",
                       type=str,
                       help="Options passed to the selected trimmer, e.g. use --trim_options='-a A{30}' "
                       "for polyA trimming with cutadapt (default: '%(default)s')",
                       default=defaults["trim_options"])
    optional.add_argument("--cell_barcode_file",
                       dest="barcode_file",
                       metavar="STR",
                       help="2-column file with cell-index (1st col) and barcode (2nd col). Default/None will use "
                       "internal CelSeq2@MPI-IE file with 192 barcodes. (default: '%(default)s')",
                       type=str,
                       default= defaults["barcode_file"])
    optional.add_argument("--barcode_pattern",
                       dest="barcode_pattern",
                       metavar="STR",
                       help="Defines the cell barcode and UMI order and length at the 5' end of R1 (Cel-seq protocol). "
                       "'N' defines UMI/random positions, X defines fixed positions; (default '%(default)s')",
                       type=str,
                       default=defaults["barcode_pattern"])
    optional.add_argument("--split_lib",
                       dest="split_lib",
                       action="store_true",
                       help="Set this option if only 96 out of 192 barcodes were used per sample.",
                       default=defaults["split_lib"])
    optional.add_argument("--filter_annotation",
                       dest="filter_annotation",
                       metavar="STR",
                       type=str,
                       help="filter annotation GTF by grep for feature counting, e.g. use --filter_annotation='-v pseudogene'; "
                       "(default: '%(default)s')",
                       default=defaults["filter_annotation"])
    optional.add_argument("--cell_names",
                       dest="cell_names",
                       metavar="STR",
                       help="either tab-sep. file with cell name ranges or directory with *.csv files that contain "
                       "cell names and plate/library information for all fastq files! (default: '%(default)s')",
                       default=defaults["cell_names"])
    optional.add_argument("--bw-binsize",
                       dest="bw_binsize",
                       metavar="INT",
                       help="bin size of output files in bigWig format (default: '%(default)s')",
                       type=int,
                       default=defaults["bw_binsize"])

    return parser


def main():

    ## basic paths only used in wrapper
    this_script_dir = os.path.dirname(os.path.realpath(__file__))
    main_dir_path = cf.get_snakepipes_path()
    
    ## defaults
    defaults = cf.load_configfile(os.path.join(this_script_dir, "defaults.yaml"),False)
    ## get command line arguments
    parser = parse_args(defaults)
    args = parser.parse_args()

    ## we also add these paths to config, although we dont use them in the Snakefile
    args.this_script_dir = this_script_dir
    args.main_dir_path = main_dir_path

    args.outdir = os.path.abspath(args.outdir)
    args.cluster_logs_dir = os.path.join(args.outdir, "cluster_logs")

    ## checks for parameters necessary in wrapper
    if os.path.exists(args.indir):
        args.indir = os.path.abspath(args.indir)
    else:
        print("\nError! Input dir (-i) not found! ({})\n".format(args.indir))
        exit(1)

    if args.configfile and not os.path.exists(args.configfile):
        print("\nError! Provided configfile (-c) not found! ({})\n".format(args.configfile))
        exit(1)

    if args.barcode_file == None:
        args.barcode_file = os.path.join(os.path.dirname(os.path.realpath(__file__)),"celseq_barcodes.192.txt")
    elif args.barcode_file != None and os.path.exists(os.path.abspath(args.barcode_file)):
        args.barcode_file = os.path.abspath(args.barcode_file)
    else:
        print("\nBarcode file (--cell_barcode_file) not found! {}\n".format(args.barcode_file))
        exit(1)

    if args.cell_names:
        if os.path.exists(os.path.abspath(args.cell_names)):
            args.cell_names = os.path.abspath(args.cell_names)
        else:
            print("\nCell_names file not found! {}\n".format(args.cell_names))
            exit(1)


    ## merge configuration dicts
    config = defaults   # 1) form defaults.yaml
    if args.configfile:
        user_config = cf.load_configfile(args.configfile,False)
        config = cf.merge_dicts(config, user_config) # 2) form user_config.yaml
    config_wrap = cf.config_diff(vars(args),defaults) # 3) from wrapper parameters
    config = cf.merge_dicts(config, config_wrap)

    ## Output directory + log directory
    subprocess.call("[ -d {cluster_logs_dir} ] || mkdir -p {cluster_logs_dir}".format(cluster_logs_dir=args.cluster_logs_dir), shell=True)

    ## save to configs.yaml in outdir
    cf.write_configfile(os.path.join(args.outdir,'config.yaml'),config)

    ## merge cluster config files: 1) global one, 2) workflow specific one, 3) user provided one
    cluster_config = cf.load_configfile(cf.get_snakepipes_path()+"/shared/cluster.yaml",False)
    cluster_config = cf.merge_dicts(cluster_config, cf.load_configfile(os.path.join(this_script_dir,"cluster.yaml"),False), )

    if args.cluster_configfile:
        user_cluster_config = cf.load_configfile(args.cluster_configfile,False)
        cluster_config = cf.merge_dicts(cluster_config, user_cluster_config) # 2) merge/override variables from user_config.yaml
    cf.write_configfile(os.path.join(args.outdir,'cluster_config.yaml'),cluster_config)

    snakemake_cmd = """
                    snakemake {snakemake_options} --latency-wait {latency_wait} --snakefile {snakefile} --jobs {max_jobs} --directory {outdir} --configfile {configfile}
                    """.format( latency_wait = cluster_config["snakemake_latency_wait"],
                                snakefile = os.path.join(this_script_dir, "Snakefile"),
                                max_jobs = args.max_jobs,
                                outdir = args.outdir,
                                snakemake_options = str(args.snakemake_options or ''),
                                configfile = os.path.join(args.outdir,'config.yaml'),
                              ).split()

    if args.verbose:
        snakemake_cmd.append("--printshellcmds")

    if not args.local:
        snakemake_cmd += ["--cluster-config",
                         os.path.join(args.outdir,'cluster_config.yaml'),
                         "--cluster", "'"+cluster_config["snakemake_cluster_cmd"],
                         args.cluster_logs_dir, "--name {rule}.snakemake'"]

    snakemake_log = "2>&1 | tee -a {}/scRNAseq-mapcount.log".format(args.outdir).split()

    ## create local temp dir and add this path to environment as $TMPDIR variable
    ## on SLURM: $TMPDIR is set, created and removed by SlurmEasy on cluster node
    temp_path = cf.make_temp_dir(args.tempdir, args.outdir)
    snakemake_exports = ("export TMPDIR="+temp_path+" && ").split()

    cmd = " ".join(snakemake_exports + snakemake_cmd + snakemake_log)

    if args.verbose:
        print("\n", cmd, "\n")

    ## Write snakemake_cmd to log file
    with open(os.path.join(args.outdir,"scRNAseq-mapcount.log"),"w") as f:
        f.write(" ".join(sys.argv)+"\n\n")
        f.write(cmd+"\n\n")

    ## Run snakemake
    p = subprocess.Popen(cmd, shell=True)
    if args.verbose:
        print("PID:", p.pid, "\n")
    try:
        p.wait()
    except:
        print("\nWARNING: Snakemake terminated!!!")
        if p.returncode != 0:
            if p.returncode:
                print("Returncode:", p.returncode)

            # kill snakemake and child processes
            subprocess.call(["pkill", "-SIGTERM", "-P", str(p.pid)])
            print("SIGTERM sent to PID:", p.pid)

            # # kill grid engine jobs
            # time.sleep(10)
            # job_ids = subprocess.check_output("""ls {cluster_logs_dir} | awk -F "." '{{print $NF}}' | sed 's/e\|o//' | sort -u""".format(cluster_logs_dir=cluster_logs_dir), shell=True).split()
            # for job_id in job_ids:
            #     subprocess.call( "qdel {} 2>&1 >/dev/null".format(str(job_id)), shell="bash" )

    ## remove temp dir
    if (temp_path != "" and os.path.exists(temp_path)):
        shutil.rmtree(temp_path, ignore_errors=True)
        if args.verbose:
            print("Temp directory removed ("+temp_path+")!\n")


if __name__ == "__main__":
    main()
