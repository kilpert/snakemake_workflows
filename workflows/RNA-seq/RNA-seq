#!/usr/bin/env python3

__version__ = "0.6"

__description__ = """
RNA-seq workflow v{version} - MPI-IE workflow for RNA mapping and analysis

usage example:
    RNA-seq -i input-dir -o output-dir mm10
""".format(version=__version__)


import argparse
import os
import signal
import subprocess
import sys
import textwrap
import time
import shutil
import yaml
import re
import inspect

sys.path.append(os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(inspect.getfile(inspect.currentframe()) )))))+"/shared/")
import common_functions as cf

def parse_args(defaults={"verbose":None,"configfile":None,"max_jobs":None,"snakemake_options":None,"tempdir":None,
                         "mode":None, "downsample":None, "trim":None,"trim_prg":None,"trim_options":None, "fastqc":None,
                         "library_type":None, "mapping_prg":None, "star_options":None, "hisat_options":None, "salmon_index_options":None,
                         "featurecounts_options":None, "filter_annotation":None, "sample_info":None,
                         "bw_binsize":None, "Genomic_contamination":None, "mapq":None}):
    """
    Parse arguments from the command line.
    """
    parser = argparse.ArgumentParser(
        prog=sys.argv[0],
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent(__description__),
        add_help=False
    )

    #optional = parser._action_groups.pop() # Edited this line

    ## positional/required
    parser.add_argument("genome",
                        metavar="GENOME",
                        help="genome acronym of target organism (supported: 'dm3', 'dm6', 'hs37d5', 'mm9', 'mm10', 'SchizoSPombe_ASM294v2')")

    required = parser.add_argument_group('required arguments')

    required.add_argument("-i", "--input-dir",
                         dest="indir",
                         required=True,
                         help="input directory containing the FASTQ files, either paired-end OR single-end data")
    required.add_argument("-o", "--output-dir",
                         dest="outdir",
                         required=True,
                         help="output directory")
    ## general args
    general = parser.add_argument_group('general arguments')
    general.add_argument("-h", "--help",
                         action="help",
                         help="show this help message and exit")

    general.add_argument("-v", "--verbose",
                         dest="verbose",
                         action="store_true",
                         help="verbose output (default: '%(default)s')",
                         default=defaults["verbose"])

    general.add_argument("-c", "--configfile",
                        dest="configfile",
                        help="configuration file: config.yaml. In absence of a config file, the default options from the "
                        "workflows would be selected from /workflows/<workflow_name>/defaults.yaml (default: '%(default)s')",
                        default=defaults["configfile"])

    general.add_argument("-j", "--jobs",
                         dest="max_jobs",
                         metavar="INT",
                         help="maximum number of concurrently submitted Slurm jobs / cores if workflow is run locally (default: '%(default)s')",
                         type=int,
                         default=defaults["max_jobs"])

    general.add_argument("--local",
                        dest="local",
                        action="store_true",
                        help="run workflow locally; default: jobs are submitted to Slurm queue (default: '%(default)s')",
                        default=False)

    general.add_argument("--snakemake_options",
                         dest="snakemake_options",
                         metavar="STR", type=str,
                         help="Snakemake options to be passed directly to snakemake,"
                              " e.g. use --snakemake_options='--dryrun --rerun-incomplete --unlock --forceall'."
                              " (default: '%(default)s')",
                        default=defaults["snakemake_options"])

    general.add_argument("--tempdir",
                         dest="tempdir",
                         type=str,
                         help="used prefix path for temporary directory created via mktemp."
                              " Created temp dir gets exported as $TMPDIR and is removed at the end of this wrapper! (default: '%(default)s')",
                         default=defaults["tempdir"])

    ## optional
    optional = parser.add_argument_group('Optional arguments')
    optional.add_argument("-m", "--mode",
    					dest="mode",
    					help="workflow running modes (available: 'mapping-free, mapping, allelic-mapping, deepTools_qc')"
    					" (default: '%(default)s')",
    					default=defaults["mode"])

    optional.add_argument("--downsample",
    					dest="downsample",
    					metavar="INT",
    					help="downsample the given number of reads randomly from each FASTQ file (default: '%(default)s')",
    					type=int,
    					default=defaults["downsample"])
    optional.add_argument("--trim_prg",
    					dest="trim_prg",
    					choices=['cutadapt', 'trimgalore'],
    					help="trimming program: cutadapt or trimgalore (default: '%(default)s')",
    					default=defaults["trim_prg"])
    optional.add_argument("--trim",
    					dest="trim",
    					action="store_true",
    					help="Activate fastq read trimming. If activated, Illumina adaptors are trimmed by default. "
                        "Additional parameters can be specified under --trim_options (default: '%(default)s')",
    					default=defaults["trim"])
    optional.add_argument("--trim_options",
    					dest="trim_options",
    					metavar="STR",
    					type=str,
    					help="Additional option string for trimming program of choice. (default: '%(default)s')",
    					default=defaults["trim_options"])
    optional.add_argument("--fastqc",
    					dest="fastqc",
    					action="store_true",
    					help="run FastQC read quality control (default: '%(default)s')",
    					default=defaults["fastqc"])
    optional.add_argument("--library_type",
    					dest="library_type",
    					metavar="",
    					help="user provided library type strand specificity. featurCounts style: 0, 1, 2 (Illumina TruSeq); default: '%(default)s')",
    					type=int,
    					default=defaults["library_type"])
    optional.add_argument("--mapping_prg",
    					dest="mapping_prg",
    					metavar="STR",
    					help="Program used for mapping: STAR or HISAT2 (default: '%(default)s')",
    					type=str,
    					default=defaults["mapping_prg"])
    optional.add_argument("--star_options",
    					dest="star_options",
    					metavar="STR",
    					help="STAR option string, e.g.: '--twopassMode Basic' (default: '%(default)s')",
    					type=str,
    					default=defaults["star_options"])
    optional.add_argument("--hisat_options",
    					dest="hisat_options",
    					metavar="STR",
    					help="HISAT2 option string (default: '%(default)s')",
    					type=str,
    					default=defaults["hisat_options"])
    optional.add_argument("--salmon_index_options",
    					dest="salmon_index_options",
    					metavar="STR",
    					type=str,
    					help="Salmon index options, e.g. '--type fmd' (default: '%(default)s')",
    					default=defaults["salmon_index_options"])
    optional.add_argument("--featurecounts_options",
    					dest="featurecounts_options",
    					metavar="STR",
    					type=str,
    					help="featureCounts option string. The options '-p -B'"
    						 " are always used for paired-end data (default: '%(default)s')",
    					default=defaults["featurecounts_options"])
    optional.add_argument("--filter_annotation",
    					dest="filter_annotation",
    					metavar="STR",
    					type=str,
    					help="filter annotation GTF by grep for use with Salmon, e.g."
    						 " use --filter_annotation='-v pseudogene'; default: '%(default)s')",
    					default=defaults["filter_annotation"])
    optional.add_argument("--DE",
    					dest="sample_info",
    					help="Information on samples (required for DE analysis); see "
    						 "'snakemake_workflows/shared/tools/sampleInfo.example.tsv' for example."
    						 " IMPORTANT: The first entry defines which group of samples are control. "
    						 " By this, the order of comparison and likewise the sign of values can be changed! (default: '%(default)s')",
    					default=defaults["sample_info"])
    optional.add_argument("--bw-binsize",
    					dest="bw_binsize",
    					metavar="INT",
    					help="bin size of output files in bigWig format (default: '%(default)s')",
    					type=int,
    					default=defaults["bw_binsize"])I
#    optional.add_argument("--GC",
#                                       dest="Genomic_contamination",
#                                       metavar="INT",
#                                       help="Returns a plot which presents the proportion of the intergenic reads. (default: '%(default)s')",
#                                       type=int,
#                                       default=defaults["Genomic_contamination"])I

    snpargs = parser.add_argument_group('allele-specific mapping arguments')
    snpargs.add_argument("--VCFfile",
                        metavar="STR",
                        help="VCF file to create N-masked genomes (default: 'None')",
                        default='',
                        type=str)
    snpargs.add_argument("--strains",
                        dest="strains",
                        metavar="STR",
                        help="Name or ID of SNP strains separated by comma (default: 'None')",
                        default='',
                        type=str)
    snpargs.add_argument("--SNPfile",
                        metavar="STR",
                        help="File containing SNP locations (default: 'None')",
                        default='',
                        type=str)
    snpargs.add_argument("--Nmasked_index",
                        metavar="STR",
                        help="N-masked index of the reference genome (default: 'None')",
                        default='',
                        type=str)
    return parser


def main():

    ## basic paths only used in wrapper
    this_script_dir = os.path.dirname(os.path.realpath(__file__))
    main_dir_path = os.path.join(os.path.dirname(os.path.dirname(this_script_dir)))

    ## defaults
    defaults = cf.load_configfile(os.path.join(this_script_dir, "defaults.yaml"),False)
    ## get command line arguments
    parser = parse_args(defaults)
    args = parser.parse_args()

    ## we also add these paths to config, although we dont use them in the Snakefile
    args.this_script_dir = this_script_dir
    args.main_dir_path = main_dir_path

    args.outdir = os.path.abspath(args.outdir)
    args.cluster_logs_dir = os.path.join(args.outdir, "cluster_logs")
    # check for Allele-specific mapping mode
    args.allele_mode = cf.checkAlleleParams(args)
    # convert file path to abspath
    if args.allele_mode == "create_and_map":
        args.VCFfile = os.path.abspath(args.VCFfile)
    elif args.allele_mode == "map_only":
        args.SNPfile = os.path.abspath(args.SNPfile)
        args.Nmasked_index = os.path.abspath(args.Nmasked_index)

## checks for parameters necessary in wrapper
# 1. Dir path
    if os.path.exists(args.indir):
        args.indir = os.path.abspath(args.indir)
    else:
        print("\nError! Input dir (-i) not found! ({})\n".format(args.indir))
        exit(1)
# 2. config file
    if args.configfile and not os.path.exists(args.configfile):
        print("\nError! Provided configfile (-c) not found! ({})\n".format(args.configfile))
        exit(1)
# 3. Sample info file
    if args.sample_info:
        if os.path.exists(os.path.abspath(args.sample_info)):
            args.sample_info = os.path.abspath(args.sample_info)
        else:
            print("\nSample info file not found! (--DE {})\n".format(args.sample_info))
            exit(1)


    ## merge configuration dicts
    config = defaults   # 1) form defaults.yaml
    if args.configfile:
        user_config = cf.load_configfile(args.configfile,False)
        config = cf.merge_dicts(config, user_config) # 2) form user_config.yaml
    config_wrap = cf.config_diff(vars(args),defaults) # 3) from wrapper parameters
    config = cf.merge_dicts(config, config_wrap)

    ## Output directory + log directory
    subprocess.call("[ -d {cluster_logs_dir} ] || mkdir -p {cluster_logs_dir}".format(cluster_logs_dir=args.cluster_logs_dir), shell=True)

    ## save to configs.yaml in outdir
    cf.write_configfile(os.path.join(args.outdir,'config.yaml'),config)

    snakemake_module_load = "module load snakemake/3.12.0 slurm &&".split()
    snakemake_cmd = """
                    snakemake {snakemake_options} --latency-wait 300 --snakefile {snakefile} --jobs {max_jobs} --directory {outdir} --configfile {configfile}
                    """.format( snakefile = os.path.join(args.this_script_dir, "Snakefile"),
                                max_jobs = args.max_jobs,
                                outdir = args.outdir,
                                snakemake_options=str(args.snakemake_options or ''),
                                configfile = os.path.join(args.outdir,'config.yaml'),
                              ).split()

    if args.verbose:
        snakemake_cmd.append("--printshellcmds")

    if not args.local:
        snakemake_cmd += ["--cluster-config ",
                         os.path.join(this_script_dir, "cluster.yaml"),
                         " --cluster 'SlurmEasy --mem-per-cpu {cluster.memory} --threads {threads} --log",
                         args.cluster_logs_dir, "--name {rule}.snakemake'"]

    snakemake_log = "2>&1 | tee -a {}/RNA-seq.log".format(args.outdir).split()

    ## create local temp dir and add this path to environment as $TMPDIR variable
    ## on SLURM: $TMPDIR is set, created and removed by SlurmEasy on cluster node
    temp_path = cf.make_temp_dir(args.tempdir, args.outdir, args.verbose)
    snakemake_exports = ("export TMPDIR="+temp_path+" && ").split()

    cmd = " ".join(snakemake_exports + snakemake_module_load + snakemake_cmd + snakemake_log)

    if args.verbose:
        print("\n", cmd, "\n")

    ## Write snakemake_cmd to log file
    with open(os.path.join(args.outdir,"RNA-seq.log"),"w") as f:
        f.write(" ".join(sys.argv)+"\n\n")
        f.write(cmd+"\n\n")

    ## Run snakemake
    p = subprocess.Popen(cmd, shell=True)
    if args.verbose:
        print("PID:", p.pid, "\n")
    try:
        p.wait()
    except:
        print("\nWARNING: Snakemake terminated!!!")
        if p.returncode != 0:
            if p.returncode:
                print("Returncode:", p.returncode)

            # kill snakemake and child processes
            subprocess.call(["pkill", "-SIGTERM", "-P", str(p.pid)])
            print("SIGTERM sent to PID:", p.pid)

            # # kill grid engine jobs
            # time.sleep(10)
            # job_ids = subprocess.check_output("""ls {cluster_logs_dir} | awk -F "." '{{print $NF}}' | sed 's/e\|o//' | sort -u""".format(cluster_logs_dir=cluster_logs_dir), shell=True).split()
            # for job_id in job_ids:
            #     subprocess.call( "qdel {} 2>&1 >/dev/null".format(str(job_id)), shell="bash" )

    ## remove temp dir
    if (temp_path != "" and os.path.exists(temp_path)):
        shutil.rmtree(temp_path, ignore_errors=True)
        if args.verbose:
            print("temp dir removed: "+temp_path+"\n")


if __name__ == "__main__":
    main()
