# import glob
import os
import subprocess
import yaml


### include ####################################################################
include: os.path.join(workflow.basedir, "internals.snakefile")
include: os.path.join(maindir, "shared", "paths.py")
include: os.path.join(maindir, "shared", "common_functions.py")
# load organism-specific data, i.e. genome indices, annotation, etc.
include: os.path.join(maindir, "shared", "load_organism_data.py")


### include modules of other snakefiles ########################################
################################################################################
## FASTQ: either downsample FASTQ files or create symlinks to input files
include: os.path.join(maindir, "shared", "rules", "FASTQ.snakefile")

## FastQC
if fastqc:
    include: os.path.join(maindir, "shared", "rules", "FastQC.snakefile")

## Salmon
if trim:
    include: os.path.join(maindir, "shared", "rules", "TrimGalore.snakefile")

# HISAT2
include: os.path.join(maindir, "shared", "rules", "RNA_mapping.snakefile")

## filtered annotation (GTF)
include: os.path.join(maindir, "shared", "rules", "filter_annotation.snakefile")

## Salmon
if "mapping-free" in mode:
    include: os.path.join(maindir, "shared", "rules", "Salmon.snakefile")

## Sleuth (on Salmon)
if sample_info:
    include: os.path.join(maindir, "shared", "rules", "sleuth.snakefile")

## bamCoverage_RPKM
include: os.path.join(maindir, "shared", "rules", "deepTools_RNA.snakefile")

## featureCounts
include: os.path.join(maindir, "shared", "rules", "featureCounts.snakefile")

## DESeq2
if sample_info:
    include: os.path.join(maindir, "shared", "rules", "DESeq2.snakefile")


### conditional/optional rules #################################################
################################################################################

def run_FastQC(fastqc):
    if fastqc:
        return( expand("FastQC/{sample}{read}_fastqc.html", sample = samples, read = reads) )
    else:
        return([])


def run_Trimming(trim, fastqc):
    if trim and fastqc:
        return( expand("FastQC_trimmed/{sample}{read}_fastqc.html", sample = samples, read = reads) )
    elif trim:
        return( expand(fastq_dir+"/{sample}{read}.fastq.gz", sample = samples, read = reads) )
    else:
        return([])


def run_mapping_free():
    if "mapping-free" in mode:
        file_list = [
        "Salmon/SalmonIndex/sa.bin",
        expand("Salmon/{sample}.quant.sf", sample=samples),
        expand("Salmon/{sample}.quant.genes.sf", sample=samples),
        "Salmon/TPM.tsv",
        "Salmon/TPM.genes.tsv",
        "Salmon/counts.tsv",
        "Salmon/counts.genes.tsv",
        expand("Salmon/{sample}/abundance.h5", sample=samples),
        ]
        if sample_info:
            file_list.append( ["DESeq2_Salmon/DESeq2.session_info.txt", "sleuth/so.rds",] )
        return(file_list)
    else:
        return([])


def run_mapping():
    if "mapping" in mode:
        file_list = [
        expand(mapping_prg+"/{sample}.bam.bai", sample = samples),
        expand("featureCounts/{sample}.counts.txt", sample=samples),
        "featureCounts/counts.tsv",
        ]
        if sample_info:
            file_list.append( ["DESeq2/DESeq2.session_info.txt"] )
        return(file_list)
    else:
        return([])


def run_deeptools_qc():
    if "deepTools_qc" in mode:
        file_list = [
        expand("BW/{sample}.RPKM.bw", sample = samples),
        "deepTools_qc/plotEnrichment/plotEnrichment.png",
        "deepTools_qc/plotEnrichment/plotEnrichment.tsv",
        "deepTools_qc/multiBigwigSummary/coverage.bed.npz",
        "deepTools_qc/plotCorrelation/correlation.pearson.bed_coverage.heatmap.png",
        "deepTools_qc/plotCorrelation/correlation.spearman.bed_coverage.heatmap.png",
        "deepTools_qc/plotPCA/PCA.bed_coverage.png",
        ]
        return(file_list)
    else:
        return([])


### execute before  starts #####################################################
################################################################################
onstart:
    if "verbose" in config and config["verbose"]:
        print()
        print("--- Workflow parameters --------------------------------------------------------")
        print("mode:", mode)
        print("samples:", samples)
        print("paired:", paired)
        print("read extension:", reads)
        print("filter annotation:", filter_annotation)
        print("-" * 80, "\n")

        print("--- Genome ---------------------------------------------------------------------")
        print("Genome:", genome)
        print("Effective genome size:", genome_size)
        print("Genome FASTA:", genome_fasta)
        print("Genome index:", genome_index)
        print("Genome 2bit:", genome_2bit)
        print("Bowtie2 index:", bowtie2_index)
        print("Gene annotation BED:", genes_bed)
        print("Gene annotation GTF:", genes_gtf)
        print("-" * 80, "\n")

        print("--- Environment ----------------------------------------------------------------")
        print("$TMPDIR: ",os.getenv('TMPDIR', ""))
        print("$HOSTNAME: ",os.getenv('HOSTNAME', ""))
        print("-" * 80, "\n")


### main rule ##################################################################
################################################################################
rule all:
    input:
        expand("FASTQ/{sample}{read}.fastq.gz", sample = samples, read = reads),
        run_FastQC(fastqc),
        run_Trimming(trim, fastqc),

        "Annotation/genes.annotated.bed",
        "Annotation/genes.filtered.bed",
        "Annotation/genes.filtered.fa",
        "Annotation/genes.filtered.saf",    # this file is used for featureCounts later on!

        run_mapping_free(),            # Salmon
        run_mapping(),                 # classical mapping + counting
        run_deeptools_qc(),


### execute after  finished ####################################################
################################################################################
onsuccess:
    if "verbose" in config and config["verbose"]:
        print("\n--- RNA-seq workflow finished successfully! ------------------------------------\n")
