# import glob
import os
import subprocess
import yaml


### include ####################################################################
include: os.path.join(workflow.basedir, "internals.snakefile")
include: os.path.join(maindir, "shared", "paths.py")
include: os.path.join(maindir, "shared", "common_functions.py")
# load organism-specific data, i.e. genome indices, annotation, etc.
include: os.path.join(maindir, "shared", "load_organism_data.py")


### include modules of other snakefiles ########################################
################################################################################
## FASTQ: either downsample FASTQ files or create symlinks to input files
include: os.path.join(maindir, "shared", "rules", "FASTQ.snakefile")

## FastQC
if fastqc:
    include: os.path.join(maindir, "shared", "rules", "FastQC.snakefile")

## TrimGalore
if trim:
    include: os.path.join(maindir, "shared", "rules", "TrimGalore.snakefile")

# HISAT2
include: os.path.join(maindir, "shared", "rules", "HISAT2.snakefile")

## filtered annotation (GTF)
include: os.path.join(maindir, "shared", "rules", "filter_annotation.snakefile")

## Salmon
include: os.path.join(maindir, "shared", "rules", "Salmon.snakefile")

## bamCoverage_RPKM
include: os.path.join(maindir, "shared", "rules", "deepTools_RNA.snakefile")

## featureCounts
include: os.path.join(maindir, "shared", "rules", "featureCounts.snakefile")


### conditional/optional rules #################################################
################################################################################
def run_FastQC(fastqc):
    if fastqc:
        return( expand("FastQC/{sample}{read}_fastqc.html", sample = samples, read = reads) )
    else:
        return([])

def run_Trimming(trim, fastqc):
    if trim and fastqc:
        return( expand("FastQC_trimmed/{sample}{read}_fastqc.html", sample = samples, read = reads) )
    elif trim:
        return( expand(fastq_dir+"/{sample}{read}.fastq.gz", sample = samples, read = reads) )
    else:
        return([])


### execute before  starts #####################################################
################################################################################
onstart:
    if "verbose" in config and config["verbose"]:
        print()
        print("--- Parameters -----------------------------------------------------------------")
        print("Input directory:", indir)
        print("Input files:", infiles)
        print("Output directory:", outdir)
        print("Samples:", samples)
        print("Paired-end reads:", paired)
        print("Read extension:", reads)
        print("Library type:", library_type)
        print("Genome:", genome)
        print("Downsample:", downsample)
        print("Trimming:", trim)
        print("FastQC:", fastqc)
        print("Input directory for mapping:", fastq_dir)
        print("filter annotation:", filter_annotation)
        print("Salmon index options:", salmon_index_options)
        print("-" * 80, "\n")

        print("--- Genome ---------------------------------------------------------------------")
        print("Genome:", genome)
        print("Effective genome size:", genome_size)
        print("Genome FASTA:", genome_fasta)
        print("Genome index:", genome_index)
        print("Genome 2bit:", genome_2bit)
        print("Bowtie2 index:", bowtie2_index)
        print("Gene annotation BED:", genes_bed)
        print("Gene annotation GTF:", genes_gtf)
        print("-" * 80, "\n")

        print("--- Environment ----------------------------------------------------------------")
        print("$TMPDIR: ",os.getenv('TMPDIR', ""))
        print("$HOSTNAME: ",os.getenv('HOSTNAME', ""))
        print("-" * 80, "\n")


### main rule ##################################################################
################################################################################
rule all:
    input:
        expand("FASTQ/{sample}{read}.fastq.gz", sample = samples, read = reads),
        run_FastQC(fastqc),
        run_Trimming(trim, fastqc),
        expand("HISAT2/{sample}.bam.bai", sample = samples),
        "Annotation/genes.annotated.bed",
        "Annotation/genes.filtered.bed",
        "Annotation/genes_filtered.fa",
        "Annotation/genes.filtered.saf",

        "Salmon/SalmonIndex/sa.bin",
        expand("Salmon/{sample}/quant.sf", sample=samples),
        expand("Salmon/{sample}/quant.genes.sf", sample=samples),
        expand("Salmon/{sample}.quant.sf", sample=samples),
        expand("Salmon/{sample}.quant.genes.sf", sample=samples),
        "Salmon/TPM.tsv",
        "Salmon/TPM.genes.tsv",
        "Salmon/counts.tsv",
        "Salmon/counts.genes.tsv",

        expand("BW/{sample}.RPKM.bw", sample = samples),
        "deepTools_qc/plotEnrichment/plotEnrichment.png",
        "deepTools_qc/plotEnrichment/plotEnrichment.tsv",
        "deepTools_qc/multiBigwigSummary/coverage.bed.npz",
        "deepTools_qc/plotCorrelation/correlation.pearson.bed_coverage.heatmap.png",
        "deepTools_qc/plotCorrelation/correlation.spearman.bed_coverage.heatmap.png",
        "deepTools_qc/plotPCA/PCA.bed_coverage.png",
        expand("featureCounts/{sample}.counts.txt", sample=samples),
        "featureCounts/counts.tsv",


### execute after  finished ####################################################
################################################################################
onsuccess:
    if "verbose" in config and config["verbose"]:
        print("\n--- DNA mapping  finished successfully! ----------------------------------------\n")
