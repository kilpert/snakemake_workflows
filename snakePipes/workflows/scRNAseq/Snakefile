import os
import snakePipes.common_functions as cf
import subprocess
import sys

def install(package):
    subprocess.call([sys.executable, "-m", "pip", "install", package])
#install("loompy")

### snakemake_workflows initialization ########################################
maindir = os.path.dirname(os.path.dirname(workflow.basedir))
workflow_rscripts=os.path.join(maindir, "shared", "rscripts")

# load conda ENVs (path is relative to "shared/rules" directory)
globals().update(cf.set_env_yamls())

# load config file
globals().update(cf.load_configfile(workflow.overwrite_configfiles[0], config["verbose"]))
# load organism-specific data, i.e. genome indices, annotation, etc.
globals().update(cf.load_organism_data(genome, maindir, config["verbose"]))
# return the pipeline version in the log
cf.get_version()

# do workflow specific stuff now
include: os.path.join(workflow.basedir, "internals.snakefile")


### include modules of other snakefiles ########################################
################################################################################
include: os.path.join(maindir, "shared", "rules", "FASTQ.snakefile")
include: os.path.join(maindir, "shared", "rules", "filterGTF.snakefile")
#umi_tools
if mode=="Gruen":
    include: os.path.join(maindir, "shared", "rules", "umi_tools.snakefile")
    include: os.path.join(maindir, "shared", "rules", "RNA_mapping.snakefile")
    include: os.path.join(maindir, "shared", "rules", "scRNAseq_Gruen.snakefile")
    # TrimGalore
    if trim:
        include: os.path.join(maindir, "shared", "rules", "trimming.snakefile")
elif mode=="STARsolo":
    include: os.path.join(maindir, "shared", "rules", "scRNAseq_STARsolo.snakefile")
    trim=False
    skipRaceID=True
pairedEnd = True
include: os.path.join(maindir, "shared", "rules", "FastQC.snakefile")
pairedEnd = False
include: os.path.join(maindir, "shared", "rules", "sambamba.snakefile")
include: os.path.join(maindir, "shared", "rules", "RNA-seq_qc_report.snakefile")
include: os.path.join(maindir, "shared", "tools" , "deeptools_cmds.snakefile")
include: os.path.join(maindir, "shared", "rules", "deepTools_RNA.snakefile")
include: os.path.join(maindir, "shared", "rules", "multiQC.snakefile")




### conditional/optional rules #################################################
################################################################################

def run_Trimming(trim):
    if trim:
        file_list = [
        expand(fastq_dir+"/{sample}"+reads[0]+".fastq.gz", sample = samples),
        expand("FastQC_trimmed/{sample}"+reads[0]+"_fastqc.html", sample = samples)
        ]
        return(file_list)
    else:
        return([])

def run_deeptools_qc():
    file_list = [
    expand("bamCoverage/{sample}.RPKM.bw", sample = samples),
    expand("bamCoverage/{sample}.coverage.bw", sample = samples),
    "deepTools_qc/plotEnrichment/plotEnrichment.tsv"]
    if len(samples)>1:
        file_list.append( ["deepTools_qc/multiBigwigSummary/coverage.bed.npz",
                           "deepTools_qc/plotCorrelation/correlation.pearson.bed_coverage.tsv",
                           "deepTools_qc/plotCorrelation/correlation.spearman.bed_coverage.tsv",
                           "deepTools_qc/plotPCA/PCA.bed_coverage.tsv"] )
    return(file_list)

def run_RaceID(skipRaceID):
    if not skipRaceID:
        file_list = [
        "Filtered_cells_RaceID/metrics.tab.RData",
        "Filtered_cells_RaceID/sessionInfo.txt",
        'Filtered_cells_RaceID/Stats_report.html'
        ]
        return(file_list)
    else:
        return([])

### execute before workflow starts #############################################
################################################################################
onstart:
    if "verbose" in config and config["verbose"]:
        print("--- Workflow parameter ---------------------------------------------------------")
        print("Input directory:", indir)
        print("Input files:", infiles)
        print("Samples:", samples)
        print("Paired-end reads:", pairedEnd)
        print("Read extension:", reads)
        print("Genome:", genome)
        print("Downsample:", downsample)
	print("Mode:", mode)
        print("Trimming:", trim)
        print("Input directory for mapping:", fastq_dir)
        print("Input directory for trimming:", fastq_indir_trim)
        print("BigWig bin size:", bwBinSize)
        print("Barcode pattern:", cellBarcodePattern)
        print("Barcode file:", cellBarcodeFile)
        print("UMI_LEN:",UMI_length)
        print("UMI_offset:",UMI_offset)
        print("CELLI_LEN:",CELLI_length)
        print("CELLI_offset:",CELLI_offset)

        print("-" * 80, "\n")

        print("--- Environment ----------------------------------------------------------------")
        print("$TMPDIR: ",os.getenv('TMPDIR', ""))
        print("$HOSTNAME: ",os.getenv('HOSTNAME', ""))
        print("-" * 80, "\n")

    if toolsVersion:
        usedEnvs = [CONDA_SHARED_ENV, CONDA_scRNASEQ_ENV]
        cf.writeTools(usedEnvs, outdir, "scRNAseq", maindir)

### main rule ##################################################################
################################################################################
localrules: FASTQ1, FASTQ2

if mode=="Gruen":
    rule all:
        input:
            expand("FASTQ_barcoded/{sample}{read}.fastq.gz", sample = samples, read=reads[0]),
            run_Trimming(trim),
            expand("FastQC/{sample}{read}_fastqc.html", sample = samples, read=reads),
            expand(aligner + "/{sample}.bam", sample = samples),
            expand(aligner + "/{sample}.bam.bai", sample = samples),
            "Sambamba/flagstat_report_all.tsv",
            "Annotation/genes.filtered.bed",
            "Annotation/genes.filtered.gtf",
            expand("Counts/{sample}.raw_counts.txt",sample = samples),
            expand("Counts/{sample}.featureCounts_summary.txt",sample = samples),
            expand("Counts/{sample}.corrected.txt",sample = samples),
            "Results/all_samples.gencode_genomic.corrected_merged.csv",
            "QC_report/QC_report.all_samples.libstats_reads.tsv",
            "Filtered_cells_monocle/metrics.tab.RData",
            "Filtered_cells_monocle/sessionInfo.txt",
            run_RaceID(skipRaceID),
            run_deeptools_qc(),
            "deepTools_qc/bamPEFragmentSize/fragmentSize.metric.tsv",
            expand("deepTools_qc/estimateReadFiltering/{sample}_filtering_estimation.txt",sample = samples),
            "multiQC/multiqc_report.html",
            'Filtered_cells_monocle/Stats_report.html'
elif mode=="STARsolo":
    rule all:
        input:
            expand("STARsolo/{sample}.sorted.bam",sample = samples),
            "Sambamba/flagstat_report_all.tsv",
            run_deeptools_qc(),
            "deepTools_qc/bamPEFragmentSize/fragmentSize.metric.tsv",
            expand("deepTools_qc/estimateReadFiltering/{sample}_filtering_estimation.txt",sample = samples),
            "multiQC/multiqc_report.html",
            expand("VelocytoCounts/{sample}.done.txt",sample=samples)

#            "VelocytoCounts_merged/merged.txt",

### execute after workflow finished ############################################
################################################################################
onsuccess:
    cf.cleanLogs(outdir, cluster_config)
    if "verbose" in config and config["verbose"]:
        print("\n--- scRNAseq workflow finished successfully! --------------------------------\n")

onerror:
    print("\n !!! ERROR in scRNAseq workflow! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n")
